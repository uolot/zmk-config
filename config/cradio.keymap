/* vim: cursorcolumn
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors.dtsi>

#define LOCK 0
#define BASE 1
#define SYMB 2
#define NAV 3
#define MISC 4
#define NUMP 5
#define FUNC 6

#define HYPER LC(LS(LG(LALT)))
#define MEH LC(LS(LALT))
#define PREVTAB LC(LS(TAB))
#define NEXTTAB LC(TAB)
#define NAVBACK LG(LEFT)
#define NAVFWD LG(RIGHT)

#define KP_ASTR KP_ASTERISK

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        td_media: tap_dance_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };
    };

    /* COMBOS

     base_layer

        Q           W           E           R           T                       Y           U           I           O           P
        A           S  <bspc>   D   <ret>   F   <nump>  G                       H           J   <ret>   K   <bspc>  L           ;
        Z           X   <cut>   C  <copy>   V  <paste>  B                       N           M   <vol->  ,   <vol+>  .           /
                                                                                            '-----    <mute>   -----'
                                           esc         tab                     sft         spc

     numpad_layer

        nump        .           .           .           .                       +           7           8           9           *
        .           .  <bspc>   .   <ret>   .   <nump>  .                       -     _     4   <ret>   5   <bspc>  6           =
        .           .           .           .           .                       .     ,     1   <spc>   2           3           /
                                            .           .                       :           0
    */

    combos {
        compatible = "zmk,combos";

        combo_numpad {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&mo_tog NUMP NUMP>;
            layers = <BASE NUMP>;
        };

        combo_enter_left {
            timeout-ms = <80>;
            key-positions = <12 13>;
            bindings = <&kp RET>;
            layers = <BASE NUMP>;
        };
        combo_enter_right {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp RET>;
            layers = <BASE NUMP>;
        };

        combo_backspace_left {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp BSPC>;
            layers = <BASE NUMP>;
        };
        combo_backspace_right {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
            layers = <BASE NUMP>;
        };

        combo_nump_under {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp UNDER>;
            layers = <NUMP>;
        };
        combo_nump_comma {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp CMMA>;
            layers = <NUMP>;
        };
        combo_nump_space {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp SPACE>;
            layers = <NUMP>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LG(X)>;
            layers = <BASE>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LG(C)>;
            layers = <BASE>;
        };
        combo_paste {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LG(V)>;
            layers = <BASE>;
        };

        combo_mute_nav {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp C_MUTE>;
            layers = <NAV>;
        };
        combo_mute_base {
            timeout-ms = <50>;
            key-positions = <26 27 28>;
            bindings = <&kp C_MUTE>;
            layers = <BASE>;
        };
        combo_vol_down {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp C_VOL_DN>;
            layers = <BASE>;
        };
        combo_vol_up {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp C_VOL_UP>;
            layers = <BASE>;
        };


        combo_unlock {
            timeout-ms = <500>;
            key-positions = <13 16>;
            bindings = <&to BASE>;
            layers = <LOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        lock_layer {
            bindings = <
       &none        &none        &none        &none        &none              &none        &none        &none        &none        &none
       &none        &none        &none        &none        &none              &none        &none        &none        &none        &none
       &none        &none        &none        &none        &none              &none        &none        &none        &none        &none
                                              &none        &none              &none        &none
                >;
        };

        base_layer {
            bindings = <
       &kp Q        &kp W        &kp E        &kp R        &kp T              &kp Y        &kp U        &kp I        &kp O        &kp P
       &kp A        &kp S        &kp D        &kp F        &kp G              &kp H        &kp J        &kp K        &kp L        &kp RET
       &kp Z        &kp X        &kp C        &kp V        &kp B              &kp N        &kp M        &kp CMMA     &kp DOT      &kp FSLH
                                              &lt SYMB ESC &lt MISC TAB     &mt LSHFT SEMI &lt NAV SPACE
                >;
        };

        symbols_layer {
            bindings = <
       &kp EXCL     &kp AT       &kp GRAVE    &kp CARET    &kp DLLR           &kp QUESTION &kp LBKT     &kp RBKT     &none        &none
       &kp PIPE     &kp AMPS     &kp DQT      &kp MINUS    &kp EQUAL          &kp STAR     &kp LPAR     &kp RPAR     &kp LT       &kp GT
       &kp BSLH     &kp PERCENT  &kp SQT      &kp UNDER    &kp PLUS           &kp HASH     &kp LBRC     &kp RBRC     &none        &kp TILDE
                                              &none        &none              &kp COLON    &none
                >;
        };

        navigation_layer {
            bindings = <
       &kp N1       &kp N2       &kp N3       &kp N4       &kp N5             &kp N6       &kp N7       &kp N8       &kp N9       &kp N0
       &sk LALT     &sk LGUI     &sk LSHIFT   &sk LCTRL    &sk HYPER          &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT    &kp RET
       &none        &sk RALT     &none        &none        &sk MEH            &kp DELETE   &kp BSPC     &kp C_VOL_DN &kp C_VOL_UP &td_media
                                              &none        &caps_word         &none        &none
                >;
        };

        misc_layer {
            bindings = <
       &sl FUNC     &kp LG(W)    &none        &kp LG(R)    &kp LG(T)          &none        &none        &none        &none        &none
       &sk LALT     &sk LGUI     &sk LSHIFT   &sk LCTRL    &sk HYPER          &sk HYPER    &sk LCTRL    &sk LSHIFT   &sk LGUI     &sk LALT
       &kp NAVBACK  &kp NAVFWD   &kp PREVTAB  &kp NEXTTAB  &sk MEH            &sk MEH      &none        &none        &sk RALT     &none
                                              &none        &none              &kp COLON    &none
                >;
        };


        numpad_layer {
            bindings = <
       &tog NUMP    &none        &none        &none        &none              &kp KP_PLUS  &kp KP_N7    &kp KP_N8    &kp KP_N9    &kp KP_ASTR
       &none        &none        &none        &none        &none              &kp KP_MINUS &kp KP_N4    &kp KP_N5    &kp KP_N6    &kp KP_EQUAL
       &none        &none        &none        &none        &none              &kp DOT      &kp KP_N1    &kp KP_N2    &kp KP_N3    &kp KP_SLASH
                                              &none        &none              &kp COLON    &kp KP_N0
                >;
        };

        func_layer {
            bindings = <
       &to LOCK     &none        &none        &none        &none              &kp F10      &kp F7       &kp F8       &kp F9       &none
       &none        &none        &none        &none        &none              &kp F11      &kp F4       &kp F5       &kp F6       &none
       &bootloader  &none        &none        &none        &none              &kp F12      &kp F1       &kp F2       &kp F3       &bootloader
                                              &none        &none              &none        &none
                >;
        };

    };
};
