// vim: cursorcolumn:ft=dts

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors.dtsi>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"


// #define LOCK 0
// #define BASE 1
// #define SYMB 2
// #define NAV 3
// #define MISC 4
// #define NUMP 5
// #define FUNC 6

#define BASE 0
#define SYMB 1
#define NAV 2
#define MISC 3
#define NUMP 4
#define FUNC 5

#define HYPER LC(LS(LG(LALT)))
#define MEH LC(LS(LALT))
#define PREVTAB LC(LS(TAB))
#define NEXTTAB LC(TAB)
#define NAVBACK LG(LEFT)
#define NAVFWD LG(RIGHT)

#define KP_ASTR KP_ASTERISK

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH1 LH0 RH0 RH1  // thumb keys

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* left-hand HRM shift */
ZMK_BEHAVIOR(hml_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    // hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRM shift */
ZMK_BEHAVIOR(hmr_s, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    // hold-trigger-on-release;             // delay positional check until key-release
)

/* 30 times DOWN arrow */
ZMK_BEHAVIOR(mac_pgdn, macro,
    wait-ms = <30>;
    tap-ms = <30>;
    bindings = <&kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
)

/* 30 times UP arrow */
ZMK_BEHAVIOR(mac_pgup, macro,
    wait-ms = <30>;
    tap-ms = <30>;
    bindings = <&kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP &kp UP>;
)

&mt {
    //  flavor = "tap-preferred";
    tapping_term_ms = <150>;
};

/ {

    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        td_media: tap_dance_media {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };
    };

    /* COMBOS

     base_layer

        Q           W           E           R           T                       Y   <prev>  U   <play>  I   <next>  O           P
        A           S  <bspc>   D   <ret>   F   <nump>  G                       H           J   <ret>   K   <bspc>  L           ;
        Z           X   <cut>   C  <copy>   V  <paste>  B                       N           M   <vol->  ,   <vol+>  .           /
                    '-----  <sel all>  -----'
                                                                                            '-----    <mute>   -----'
                                           esc         tab                     sft         spc

     numpad_layer

        nump        .           .           .           .                       +           7           8           9           *
        .           .  <bspc>   .   <ret>   .   <nump>  .                       -     _     4   <ret>   5   <bspc>  6           =
        .           . <c-left>  . <c-right> .           .                       .     ,     1   <spc>   2           3           /
                                            .           .                       :           0
    */

    combos {
        compatible = "zmk,combos";

        // reset on ASDF and JKL;
        sys_reset_left {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <10 11 12 13>;
            bindings = <&sys_reset>;
            layers = <BASE SYMB NAV MISC NUMP FUNC>;
        };

        sys_reset_right {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <16 17 18 19>;
            bindings = <&sys_reset>;
            layers = <BASE SYMB NAV MISC NUMP FUNC>;
        };

        // soft off on QWER and UIOP
        soft_off_left {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <0 1 2 3>;
            bindings = <&soft_off>;
            layers = <BASE SYMB NAV MISC NUMP FUNC>;
        };

        soft_off_right {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <6 7 8 9>;
            bindings = <&soft_off>;
            layers = <BASE SYMB NAV MISC NUMP FUNC>;
        };

        combo_numpad {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <13 14>;
            bindings = <&mo_tog NUMP NUMP>;
            layers = <BASE NUMP>;
        };

        combo_enter_left {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <12 13>;
            bindings = <&kp RET>;
            layers = <BASE NUMP>;
        };
        combo_enter_right {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <16 17>;
            bindings = <&kp RET>;
            layers = <BASE NUMP>;
        };

        combo_backspace_left {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <11 12>;
            bindings = <&kp BSPC>;
            layers = <BASE NUMP>;
        };
        combo_backspace_right {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
            layers = <BASE NUMP>;
        };

        combo_nump_under {
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            key-positions = <15 16>;
            bindings = <&kp UNDER>;
            layers = <NUMP>;
        };
        combo_nump_comma {
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            key-positions = <25 26>;
            bindings = <&kp COMMA>;
            layers = <NUMP>;
        };
        combo_nump_space {
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            key-positions = <26 27>;
            bindings = <&kp SPACE>;
            layers = <NUMP>;
        };

        combo_cut {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <21 22>;
            bindings = <&kp LG(X)>;
            layers = <BASE>;
        };
        combo_copy {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <22 23>;
            bindings = <&kp LG(C)>;
            layers = <BASE>;
        };
        combo_paste {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <23 24>;
            bindings = <&kp LG(V)>;
            layers = <BASE>;
        };
        combo_sel_all {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(A)>;
            layers = <BASE>;
        };

        combo_mute_nav {
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            key-positions = <27 28>;
            bindings = <&kp C_MUTE>;
            layers = <NAV>;
        };
        combo_mute_base {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <26 27 28>;
            bindings = <&kp C_MUTE>;
            layers = <BASE>;
        };
        combo_vol_down {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <26 27>;
            bindings = <&kp C_VOL_DN>;
            layers = <BASE>;
        };
        combo_vol_up {
            timeout-ms = <30>;
            require-prior-idle-ms = <75>;
            key-positions = <27 28>;
            bindings = <&kp C_VOL_UP>;
            layers = <BASE>;
        };

        combo_media_prev {
            timeout-ms = <40>;
            require-prior-idle-ms = <75>;
            key-positions = <5 6>;
            bindings = <&kp C_PREV>;
            layers = <BASE>;
        };
        combo_media_play_pause {
            timeout-ms = <40>;
            require-prior-idle-ms = <75>;
            key-positions = <6 7>;
            bindings = <&kp C_PLAY_PAUSE>;
            layers = <BASE>;
        };
        combo_media_next {
            timeout-ms = <40>;
            require-prior-idle-ms = <75>;
            key-positions = <7 8>;
            bindings = <&kp C_NEXT>;
            layers = <BASE>;
        };

        combo_left_space {
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            key-positions = <21 22>;
            bindings = <&kp LC(LEFT)>;
            layers = <MISC>;
        };
        combo_right_space {
            timeout-ms = <50>;
            require-prior-idle-ms = <75>;
            key-positions = <22 23>;
            bindings = <&kp LC(RIGHT)>;
            layers = <MISC>;
        };



        // combo_unlock {
        //     timeout-ms = <500>;
        //     key-positions = <13 16>;
        //     bindings = <&to BASE>;
        //     layers = <LOCK>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        /*
        lock_layer {
            bindings = <
       &none        &none        &none        &none        &none              &none        &none        &none        &none        &none
       &none        &none        &none        &none        &none              &none        &none        &none        &none        &none
       &none        &none        &none        &none        &none              &none        &none        &none        &none        &none
                                              &none        &none              &none        &none
                >;
        };
        */

        base_layer {
            bindings = <
       &kp Q        &kp W        &kp E          &kp R        &kp T              &kp Y        &kp U        &kp I          &kp O       &kp P
       &hml LALT A  &hml LGUI S  &hml_s LSHFT D &hml LCTRL F &hml HYPER G       &hmr HYPER H &hmr LCTRL J &hmr_s LSHFT K &hmr LGUI L &hmr LALT RET
       &kp Z        &kp X        &kp C          &hml RALT V  &hml MEH B         &hmr MEH N   &hmr RALT M  &kp COMMA       &kp DOT     &kp FSLH
                                                &lt SYMB ESC &lt MISC TAB     &mt LSHFT SEMI &lt NAV SPACE
                >;
        };

        symbols_layer {
            bindings = <
       &kp EXCL       &kp AT         &kp GRAVE      &kp CARET        &kp DLLR             &kp QUESTION    &kp LBKT        &kp RBKT        &none        &none
       &hml LALT PIPE &hml LGUI AMPS &hml LSHFT DQT &hml LCTRL MINUS &hml HYPER EQUAL     &hmr HYPER STAR &hmr LCTRL LPAR &hmr LSHFT RPAR &hmr LGUI LT &hml LALT GT
       &kp BSLH       &kp PERCENT    &kp SQT        &hml RALT UNDER  &kp PLUS             &kp HASH        &hmr RALT LBRC  &kp RBRC        &none        &kp TILDE
                                                    &none            &none                &kp COLON       &none
                >;
        };

        navigation_layer {
            bindings = <
       &kp N1       &kp N2       &kp N3       &kp N4       &kp N5             &kp N6       &kp N7       &kp N8       &kp N9       &kp N0
       &sk LALT     &sk LGUI     &sk LSHIFT   &sk LCTRL    &sk HYPER          &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT    &kp RET
       &none        &none        &none        &sk RALT     &sk MEH            &kp DELETE   &kp BSPC     &kp C_VOL_DN &kp C_VOL_UP &td_media
                                              &none        &caps_word         &none        &none
                >;
        };

        misc_layer {
            bindings = <
       &sl FUNC     &kp LG(W)    &kp LG(L)    &kp LG(R)     &kp LG(T)          &kp C_BRI_UP &kp C_BRI_DN &none        &none        &kp GLOBE
       &kp HOME     &kp END      &mac_pgup    &mac_pgdn     &kp LG(LS(T))      &sk HYPER    &sk LCTRL    &sk LSHIFT   &sk LGUI     &sk LALT
       &kp NAVBACK  &kp NAVFWD   &kp PREVTAB  &kp NEXTTAB   &kp LG(N)          &sk MEH      &sk RALT     &none        &none        &kp K_MENU
                                              &none         &none              &kp COLON    &none
                >;
        };


        numpad_layer {
            bindings = <
       &tog NUMP    &none        &none        &none        &none              &kp KP_PLUS  &kp KP_N7    &kp KP_N8    &kp KP_N9    &kp KP_ASTR
       &none        &none        &none        &none        &none              &kp KP_MINUS &kp KP_N4    &kp KP_N5    &kp KP_N6    &kp KP_EQUAL
       &none        &none        &none        &none        &none              &kp DOT      &kp KP_N1    &kp KP_N2    &kp KP_N3    &kp KP_SLASH
                                              &none        &none              &kp COLON    &kp KP_N0
                >;
        };

        func_layer {
            bindings = <
       &sl BASE     &out OUT_USB &out OUT_BLE &none        &bt BT_CLR         &kp F10      &kp F7       &kp F8       &kp F9       &none
       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &kp F11      &kp F4       &kp F5       &kp F6       &none
       &bootloader  &none        &none        &none        &none              &kp F12      &kp F1       &kp F2       &kp F3       &bootloader
                                              &none        &none              &none        &none
                >;
        };

    };
};

